"use strict";(()=>{var a=[[null,null,null],[null,null,null],[null,null,null]];function s(){return console.log("getBoard was called"),a}function d(e){a=e,console.log("setBoard was called")}var o="nought",r="cross",m="nobody";var i;function f(e,n,t,l,P){return t==!1&&(l[e][n]=P),console.log(`takeTurn was called with row: ${e}, column: ${n}`),l}function y(e){return e=="nought"||e==null?e="cross":e="nought",console.log("Switch player called. Current player is",e),e}function g(e){console.log("checkWinner was called")}function c(){i="cross",console.log("resetGame was called")}function u(){return i}function p(e){i=e}function x(){return!1}var h=document.getElementById("winner-name"),C=document.getElementById("winner-display"),B=[o,r,null],w=[o,r,m];function b(){for(let e=0;e<3;e++)for(let n=0;n<3;n++)document.getElementById(`row-${e}-column-${n}`).innerHTML=""}function T(e){console.log("populateHtmlGridWithBoardState was called with",e),b();for(let n=0;n<3;n++)for(let t=0;t<3;t++){if(!e[n][t])continue;let l=e[n][t]===o?"\u2B55":"\u274C";document.getElementById(`row-${n}-column-${t}`).innerText=l}}function v(e){return Array.isArray(e)&&e.length===3}function $(e){return v(e)&&e.every(function(n){return B.includes(n)})}function k(e,n){console.log(`positionClick was called with rowIndex=${e}, columnIndex=${n},`);let t=f(e,n,x(),s(),u());if(d(t),p(y(u())),!v(t[0])||!t.every($))throw`Expecting "getBoard" to return a 2d array where all values are one of the strings ${B}. Actually received: ${JSON.stringify(t)}`;T(t);let l=g(t);if(l){if(typeof l!="string"||!w.includes(l))throw`Expecting "checkWinner" to return null or one of the strings ${w}. Actually received: ${l}`;h.innerText=l,C.style.display="block"}}function I(e){c(),h.innerText="",C.style.display="None",b()}for(let e=0;e<3;e++)for(let n=0;n<3;n++)document.getElementById(`row-${e}-column-${n}`).addEventListener("click",k.bind(null,e,n));var G=document.getElementById("reset-button");G.addEventListener("click",I);c();})();
//# sourceMappingURL=data:application/json;base64,
