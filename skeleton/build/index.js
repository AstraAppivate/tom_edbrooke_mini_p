"use strict";(()=>{function l(){return console.log("getBoard was called!!!!!"),l()}function u(e){console.log("setBoard was called")}var o="nought",c="cross",a="nobody";function s(e,n,t,r,I){return console.log(`takeTurn was called with row: ${e}, column: ${n}`),[]}function d(e){console.log("Switch player called. Current player is",e)}function y(e){console.log("checkWinner was called")}function i(){console.log("resetGame was called")}function m(){return!1}var g=document.getElementById("winner-name"),p=document.getElementById("winner-display"),x=[o,c,null],f=[o,c,a];function w(){for(let e=0;e<3;e++)for(let n=0;n<3;n++)document.getElementById(`row-${e}-column-${n}`).innerHTML=""}function h(e){console.log("populateHtmlGridWithBoardState was called with",e),w();for(let n=0;n<3;n++)for(let t=0;t<3;t++){if(!e[n][t])continue;let r=e[n][t]===o?"\u2B55":"\u274C";document.getElementById(`row-${n}-column-${t}`).innerText=r}}function C(e){return Array.isArray(e)&&e.length===3}function B(e){return C(e)&&e.every(function(n){return x.includes(n)})}function P(e,n){console.log(`positionClick was called with rowIndex=${e}, columnIndex=${n},`);let t=s(e,n,m(),l(),void 0);if(u(t),d(void 0),!C(t[0])||!t.every(B))throw`Expecting "getBoard" to return a 2d array where all values are one of the strings ${x}. Actually received: ${JSON.stringify(t)}`;h(t);let r=y(t);if(r){if(typeof r!="string"||!f.includes(r))throw`Expecting "checkWinner" to return null or one of the strings ${f}. Actually received: ${r}`;g.innerText=r,p.style.display="block"}}function b(e){i(),g.innerText="",p.style.display="None",w()}for(let e=0;e<3;e++)for(let n=0;n<3;n++)document.getElementById(`row-${e}-column-${n}`).addEventListener("click",P.bind(null,e,n));var v=document.getElementById("reset-button");v.addEventListener("click",b);i();})();
//# sourceMappingURL=data:application/json;base64,
