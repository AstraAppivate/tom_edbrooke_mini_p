"use strict";(()=>{var c=[];function a(){return console.log("getBoard was called!!!!!"),c}function u(e){c=e,console.log("setBoard was called")}var r="nought",l="cross",s="nobody";function d(e,n,t,o,P){return console.log(o),o[e][n]=P,console.log(`takeTurn was called with row: ${e}, column: ${n}`),o}function y(e){console.log("Switch player called. Current player is",e)}function m(e){console.log("checkWinner was called")}function i(){console.log("resetGame was called")}function f(){return!1}var p=document.getElementById("winner-name"),x=document.getElementById("winner-display"),w=[r,l,null],g=[r,l,s];function C(){for(let e=0;e<3;e++)for(let n=0;n<3;n++)document.getElementById(`row-${e}-column-${n}`).innerHTML=""}function B(e){console.log("populateHtmlGridWithBoardState was called with",e),C();for(let n=0;n<3;n++)for(let t=0;t<3;t++){if(!e[n][t])continue;let o=e[n][t]===r?"\u2B55":"\u274C";document.getElementById(`row-${n}-column-${t}`).innerText=o}}function h(e){return Array.isArray(e)&&e.length===3}function b(e){return h(e)&&e.every(function(n){return w.includes(n)})}function v(e,n){console.log(`positionClick was called with rowIndex=${e}, columnIndex=${n},`);let t=d(e,n,f(),a(),void 0);if(u(t),y(void 0),!h(t[0])||!t.every(b))throw`Expecting "getBoard" to return a 2d array where all values are one of the strings ${w}. Actually received: ${JSON.stringify(t)}`;B(t);let o=m(t);if(o){if(typeof o!="string"||!g.includes(o))throw`Expecting "checkWinner" to return null or one of the strings ${g}. Actually received: ${o}`;p.innerText=o,x.style.display="block"}}function T(e){i(),p.innerText="",x.style.display="None",C()}for(let e=0;e<3;e++)for(let n=0;n<3;n++)document.getElementById(`row-${e}-column-${n}`).addEventListener("click",v.bind(null,e,n));var $=document.getElementById("reset-button");$.addEventListener("click",T);i();})();
//# sourceMappingURL=data:application/json;base64,
