"use strict";(()=>{var y=[[null,null,null],[null,null,null],[null,null,null]];function m(){return console.log("getBoard was called"),y}function g(e){y=e,console.log("setBoard was called")}var s="nought",a="cross",p="nobody";var u;function x(e,l,t,o,d){return o[e][l]!=null||(t==!1&&(o[e][l]=d),console.log(`takeTurn was called with row: ${e}, column: ${l}`)),o}function w(e){return e=="nought"||e==null?e="cross":e="nought",console.log("Switch player called. Current player is",e),e}function h(e){let l=e.length;for(let n=0;n<l;n++){if(e[n].every(i=>i===e[n][0]&&i!==null))return e[n][0];let r=!0;for(let i=0;i<l;i++)if(e[i][n]!==e[0][n]||e[i][n]===null){r=!1;break}if(r)return e[0][n]}let t=!0;for(let n=0;n<l;n++)if(e[n][n]!==e[0][0]||e[n][n]===null){t=!1;break}if(t)return e[0][0];let o=!0;for(let n=0;n<l;n++)if(e[n][l-1-n]!==e[0][l-1]||e[n][l-1-n]===null){o=!1;break}if(o)return e[0][l-1];if((n=>n.some(r=>r.some(i=>i===null)))(e)==!1)return"nobody";console.log("checkWinner was called")}function c(){u="cross",console.log("resetGame was called")}function f(){return u}function C(e){u=e}function b(){return!1}var k=document.getElementById("winner-name"),v=document.getElementById("winner-display"),T=[s,a,null],P=[s,a,p];function $(){for(let e=0;e<3;e++)for(let l=0;l<3;l++)document.getElementById(`row-${e}-column-${l}`).innerHTML=""}function E(e){console.log("populateHtmlGridWithBoardState was called with",e),$();for(let l=0;l<3;l++)for(let t=0;t<3;t++){if(!e[l][t])continue;let o=e[l][t]===s?"\u2B55":"\u274C";document.getElementById(`row-${l}-column-${t}`).innerText=o}}function G(e){return Array.isArray(e)&&e.length===3}function I(e){return G(e)&&e.every(function(l){return T.includes(l)})}function W(e,l){console.log(`positionClick was called with rowIndex=${e}, columnIndex=${l},`);let t=x(e,l,b(),m(),f());if(g(t),C(w(f())),!G(t[0])||!t.every(I))throw`Expecting "getBoard" to return a 2d array where all values are one of the strings ${T}. Actually received: ${JSON.stringify(t)}`;E(t);let o=h(t);if(o){if(typeof o!="string"||!P.includes(o))throw`Expecting "checkWinner" to return null or one of the strings ${P}. Actually received: ${o}`;k.innerText=o,v.style.display="block"}}function O(e){c(),k.innerText="",v.style.display="None",$()}for(let e=0;e<3;e++)for(let l=0;l<3;l++)document.getElementById(`row-${e}-column-${l}`).addEventListener("click",W.bind(null,e,l));var V=document.getElementById("reset-button");V.addEventListener("click",O);c();})();
//# sourceMappingURL=data:application/json;base64,
