"use strict";(()=>{var y=[[null,null,null],[null,null,null],[null,null,null]];function m(){return console.log("getBoard was called"),y}function g(e){y=e,console.log("setBoard was called")}var s="nought",u="cross",p="nobody";var c;function x(e,l,t,o,a){return o[e][l]!=null||(t==!1&&(o[e][l]=a),console.log(`takeTurn was called with row: ${e}, column: ${l}`)),o}function h(e){return e=="nought"||e==null?e="cross":e="nought",console.log("Switch player called. Current player is",e),e}function w(e){let l=e.length;for(let n=0;n<l;n++){if(e[n].every(i=>i===e[n][0]&&i!==null))return e[n][0];let r=!0;for(let i=0;i<l;i++)if(e[i][n]!==e[0][n]||e[i][n]===null){r=!1;break}if(r)return e[0][n]}let t=!0;for(let n=0;n<l;n++)if(e[n][n]!==e[0][0]||e[n][n]===null){t=!1;break}if(t)return e[0][0];let o=!0;for(let n=0;n<l;n++)if(e[n][l-1-n]!==e[0][l-1]||e[n][l-1-n]===null){o=!1;break}if(o)return e[0][l-1];let a=!0;for(let n=0;n<e.length;n++)for(let r=0;r<e[n].length;r++)if(e[n][r]!=null){a=!1;break}console.log("checkWinner was called")}function f(){c="cross",console.log("resetGame was called")}function d(){return c}function C(e){c=e}function b(){return!1}var k=document.getElementById("winner-name"),v=document.getElementById("winner-display"),T=[s,u,null],P=[s,u,p];function $(){for(let e=0;e<3;e++)for(let l=0;l<3;l++)document.getElementById(`row-${e}-column-${l}`).innerHTML=""}function E(e){console.log("populateHtmlGridWithBoardState was called with",e),$();for(let l=0;l<3;l++)for(let t=0;t<3;t++){if(!e[l][t])continue;let o=e[l][t]===s?"\u2B55":"\u274C";document.getElementById(`row-${l}-column-${t}`).innerText=o}}function G(e){return Array.isArray(e)&&e.length===3}function I(e){return G(e)&&e.every(function(l){return T.includes(l)})}function W(e,l){console.log(`positionClick was called with rowIndex=${e}, columnIndex=${l},`);let t=x(e,l,b(),m(),d());if(g(t),C(h(d())),!G(t[0])||!t.every(I))throw`Expecting "getBoard" to return a 2d array where all values are one of the strings ${T}. Actually received: ${JSON.stringify(t)}`;E(t);let o=w(t);if(o){if(typeof o!="string"||!P.includes(o))throw`Expecting "checkWinner" to return null or one of the strings ${P}. Actually received: ${o}`;k.innerText=o,v.style.display="block"}}function O(e){f(),k.innerText="",v.style.display="None",$()}for(let e=0;e<3;e++)for(let l=0;l<3;l++)document.getElementById(`row-${e}-column-${l}`).addEventListener("click",W.bind(null,e,l));var H=document.getElementById("reset-button");H.addEventListener("click",O);f();})();
//# sourceMappingURL=data:application/json;base64,
